#include <iostream>

#define MOD 1000000009

using namespace std;

int dp[1000001][4];

void init() {
	dp[1][1] = 1;
	dp[1][2] = 0;
	dp[1][3] = 0;

	dp[2][1] = 1;
	dp[2][2] = 1;
	dp[2][3] = 0;

	dp[3][1] = 2;
	dp[3][2] = 1;
	dp[3][3] = 1;

	for (int i = 4; i <= 1000000; i++) {
		dp[i][1] = ((dp[i - 1][1] + dp[i - 1][2]) % MOD + dp[i - 1][3]) % MOD;
		// 각 수를 합할 때, int형을 넘어가지 않도록 각 덧셈 연산마다 MOD 수행
		dp[i][2] = ((dp[i - 2][1] + dp[i - 2][2]) % MOD + dp[i - 2][3]) % MOD;
		dp[i][3] = ((dp[i - 3][1] + dp[i - 3][2]) % MOD + dp[i - 3][3]) % MOD;
	}
}

int main() {
	//freopen_s(new FILE*, "input.txt", "r", stdin);
	init();

	int T; cin >> T;
	while (T--) {
		int N;
		cin >> N;

		cout << (((dp[N][1] + dp[N][2]) % MOD) + dp[N][3]) % MOD << '\n';
	}

	/*
정수 n이 주어졌을 때, n을 1,2,3의 합으로 나타내는 방법의 수를 구하기

dp[N][i]을 마지막 수가 i인, N을 만드는 방법의 수라고 할 때

dp[N][1] =

dp[1][1] = 1
dp[1][2] = 0
dp[1][3] = 0

dp[2][1] = 1+1
dp[2][2] = 2
dp[2][3] = 0

dp[3][1] = 1+1+1, 2+1
dp[3][2] = 1+2
dp[3][3] = 3

dp[4][1] = 1+1+1+1, 1+2+1, 2+1+1, 3+1
dp[4][2] = 1+1+2, 2+2
dp[4][3] = 1+3

dp[5][1] =
	4를 만드는데 1로 끝나는 수에 1을 더하기(dp[4][1]) +
	4를 만드는데 2로 끝나는 수에 1을 더하기(dp[4][2]) +
	4를 만드는데 3으로 끝나는 수에 1을 더하기(dp[4][3])의 개수의 합
dp[5][2] = dp[3][1] + dp[3][2] + dp[3][3]
dp[5][3] = dp[2][1] + dp[2][2] + dp[2][3]

...

dp[N][1] = dp[N-1][1] + dp[N-1][2] + dp[N-1][3]
dp[N][2] = dp[N-2][1] + dp[N-2][2] + dp[N-2][3]
dp[N][3] = dp[N-3][1] + dp[N-3][2] + dp[N-3][3]
*/

	return 0;
}

