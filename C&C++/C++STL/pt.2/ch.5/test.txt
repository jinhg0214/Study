1. 다음 빈 칸을 채우세요.

1) STL 구성 요소에서 객체들을 저장하는 객체를 (    )라 합니다.
2) 컨테이너의 원소를 순회하고 참조하는 객체를 (    )라 합니다.
3) 여러 가지 문제 해결을 위한 반복자와 동작하는 함수 템플릿을 (    )라 합니다.

컨테이너 // 반복자 // 알고리즘

2. 다음 빈 칸을 채우세요.

1) 컨테이너 원소가 자신만의 삽입 위치를 갖는 것을 (    ) 컨테이너라 합니다.
2) 컨테이너 원소가 특정 정렬 기준에 의해 자동 정렬된 것을 (    ) 컨테이너라 합니다.

표준 시퀸스 컨테이너 (standard sequence container) // 표준 연관 컨테이너 (standard associative container)

3. 다음 빈 칸을 채우세요.

1) 배열 기반 컨테이너인 vector와 deque는 (    ) 반복자를 제공하며, 그외 모든 STL 컨테이너는 (    ) 반복자를 제공합니다.
2) (    )은 원소의 순서 있는 집합을 의미하며, 이 (    )은 반복자 쌍(구간)으로 표현합니다.

임의 접근 반복자(Random access iterator), 양방향 반복자(Bidirectional iterator) // 순차열(sequence)

4. 다음 구간 [begin, end) , [begin, iter), [iter, end)의 순차열을 쓰세요.

[begin, end) : A,B,C,D,E 
[begin, iter) : A,B
[iter, end) : C, D

5. 다음 중 양방향 반복자가 지원하지 않는 연산자를 고르시오

++, --, *, [], += ,-=

[], +=, -=

6. 다음 빈 칸을 채우세요

1) STL 컨테이너는 자신이 지원하는 반복자를 반환하기 위한 멤버 함수 (    )와 (    )를 제공하며 각각 시작 원소와 반복자와 끝 표시 반복자입니다.
2) iter 반복자가 가리키는 원소를 참조하기 위해 (    ) 연산자를 사용합니다

begin(), end(), * 연산자

7. 다음 빈 칸을 채우세요

1) (    )는 구성 요소의 인터페이스를 변경합니다.
2) stack, queue, priority_queue는 (    )이며, reverse_iterator, insert_iterator 등을 (    ) 라 합니다.
3) (    )에는 바인더(binder), 부정자(negator) 등이 있습니다.

어댑터 // 컨테이너 어댑터, 반복자 어탭더 // 함수 어댑터 